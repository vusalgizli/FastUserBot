# Copyright (C) 2021-2022 CyberUserBot
# This file is a part of < https://github.com/FaridDadashzade/CyberUserBot/ >
# Please read the GNU General Public License v3.0 in
# <https://www.github.com/FaridDadashzade/CyberUserBot/blob/master/LICENSE/>.

from asyncio import sleep
from random import choice, getrandbits, randint
from re import sub
import time
import asyncio

from collections import deque

import requests

from cowpy import cow

from userbot import CMD_HELP, ZALG_LIST
from userbot.events import register
from userbot.modules.admin import get_user_from_event
from userbot.cmdhelp import CmdHelp

# ================= CONSTANT =================
EMOJIS = [
    "üòÇ",
    "üòÇ",
    "üëå",
    "‚úå",
    "üíû",
    "üëç",
    "üëå",
    "üíØ",
    "üé∂",
    "üëÄ",
    "üòÇ",
    "üëì",
    "üëè",
    "üëê",
    "üçï",
    "üí•",
    "üç¥",
    "üí¶",
    "üí¶",
    "üçë",
    "üçÜ",
    "üò©",
    "üòè",
    "üëâüëå",
    "üëÄ",
    "üëÖ",
    "üò©",
    "üö∞",
]

UWUS = [
    "(„Éª`œâ¬¥„Éª)",
    ";;w;;",
    "owo",
    "UwU",
    ">w<",
    "^w^",
    r"\(^o\) (/o^)/",
    "( ^ _ ^)‚à†‚òÜ",
    "(√¥_√¥)",
    "~:o",
    ";-;",
    "(*^*)",
    "(>_",
    "(‚ô•_‚ô•)",
    "*(^O^)*",
    "((+_+))",
]

FACEREACTS = [
    " ò‚Äø ò",
    "„Éæ(-_- )„Çû",
    "(„Å£Àò⁄°ÀòœÇ)",
    "(¬¥–∂ÔΩÄœÇ)",
    "( ‡≤†  ñÃØ ‡≤†)",
    "(¬∞ Õú ñÕ°¬∞)‚ï≠‚à©‚ïÆ",
    "(·µü‡∫∂Ô∏µ ·µü‡∫∂)",
    "(‡∏á„ÉÑ)‡∏ß",
    " ö(‚Ä¢ÔΩÄ",
    "(„Å£‚ñÄ¬Ø‚ñÄ)„Å§",
    "(‚ó†Ôπè‚ó†)",
    "( Õ°‡≤†  ñÃØ Õ°‡≤†)",
    "( ‡∞† Õü ñ ‡∞†)",
    "(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü",
    "(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
    "(._.)",
    "{‚Ä¢ÃÉ_‚Ä¢ÃÉ}",
    "(·µî·¥•·µî)",
    "‚ô®_‚ô®",
    "‚•Ä.‚•Ä",
    "ÿ≠Àö‡Ø∞Àö„Å• ",
    "(“Ç‚ó°_‚ó°)",
    "∆™(⁄ì◊≤)‚Äé∆™‚Äã‚Äã",
    "(„Å£‚Ä¢ÃÅÔΩ°‚Ä¢ÃÅ)‚ô™‚ô¨",
    "‚óñ·µî·¥•·µî‚óó ‚ô™ ‚ô´ ",
    "(‚òûÔæü„ÉÆÔæü)‚òû",
    "[¬¨¬∫-¬∞]¬¨",
    "(‘æ‚Ä∏ ‘æ)",
    "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà ÃëÃë",
    "„Éæ(¬¥„Äá`)Ôæâ‚ô™‚ô™‚ô™",
    "(‡∏á'ÃÄ-'ÃÅ)‡∏á",
    "·Éö(‚Ä¢ÃÅ‚Ä¢ÃÅ·Éö)",
    " ï ‚Ä¢ÃÅÿà‚Ä¢ÃÄ ‚Çé",
    "‚ô™‚ô™ „ÉΩ(Àá‚àÄÀá )„Çû",
    "—âÔºàÔæü–îÔæü—âÔºâ",
    "( Àá‡∑¥Àá )",
    "Îàà_Îàà",
    "(‡πë‚Ä¢ÃÅ ‚ÇÉ ‚Ä¢ÃÄ‡πë) ",
    "( Àò ¬≥Àò)‚ô• ",
    "‘Ö(‚âñ‚Äø‚âñ‘Ö)",
    "‚ô•‚Äø‚ô•",
    "‚óî_‚óî",
    "‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
    "‰πÅ( ‚óî ‡±™‚óî)„Äå      ‚îë(Ôø£–î Ôø£)‚îç",
    "( ‡∞†‡µ†‡∞† )Ôæâ",
    "Ÿ©(‡πè_‡πè)€∂",
    "‚îå(„ÜÜ„â®„ÜÜ) É",
    "‡∞†_‡∞†",
    "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
    "(„Éé‡≤† ‚à©‡≤†)„ÉéÂΩ°( \\o¬∞o)\\",
    "‚Äú„ÉΩ(¬¥‚ñΩÔΩÄ)„Éé‚Äù",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
    "ÔΩ°Ôæü( Ôæü‡Æá‚Ä∏‡ÆáÔæü)ÔæüÔΩ°",
    "(„Å•Ôø£ ¬≥Ôø£)„Å•",
    "(‚äô.‚òâ)7",
    "·ïï( ·êõ )·ïó",
    "t(-_-t)",
    "(‡≤•‚å£‡≤•)",
    "„ÉΩ‡ºº ‡≤†Áõä‡≤† ‡ºΩÔæâ",
    "‡ºº‚àµ‡ºΩ ‡ºº‚ç®‡ºΩ ‡ºº‚ç¢‡ºΩ ‡ºº‚ç§‡ºΩ",
    "„Éü‚óèÔπè‚òâ„Éü",
    "(‚äô_‚óé)",
    "¬ø‚ìß_‚ìßÔÆå",
    "‡≤†_‡≤†",
    "(¬¥ÔΩ•_ÔΩ•`)",
    "·ï¶(√≤_√≥Àá)·ï§",
    "‚äôÔπè‚äô",
    "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª",
    r"¬Ø\_(‚äôÔ∏ø‚äô)_/¬Ø",
    "Ÿ©‚óîÃØ‚óî€∂",
    "¬∞‚Äø‚Äø¬∞",
    "·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó",
    "‚äÇ(‚óâ‚Äø‚óâ)„Å§",
    "V‚Ä¢·¥•‚Ä¢V",
    "q(‚ùÇ‚Äø‚ùÇ)p",
    "‡≤•_‡≤•",
    "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    "‡≤•Ôπè‡≤•",
    "Ôºà ^_^ÔºâoËá™Ëá™oÔºà^_^ Ôºâ",
    "‡≤†‚Äø‡≤†",
    "„ÉΩ(¬¥‚ñΩ`)/",
    "·µí·¥•·µí#",
    "( Õ°¬∞ Õú ñ Õ°¬∞)",
    "‚î¨‚îÄ‚î¨Ôªø „Éé( „Çú-„Çú„Éé)",
    "„ÉΩ(¬¥„ÉºÔΩÄ)„Éé",
    "‚òú(‚åí‚ñΩ‚åí)‚òû",
    "Œµ=Œµ=Œµ=‚îå(;*¬¥–î`)Ôæâ",
    "(‚ï¨ ‡≤†Áõä‡≤†)",
    "‚î¨‚îÄ‚î¨‚É∞Õ°‚Äá(·µî·µï·µîÕú‚Äá)",
    "‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`–î¬¥)ÔæâÔ∏µÔªø ‚îª‚îÅ‚îª",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    " ï·µî·¥•·µî î",
    "(`ÔΩ•œâÔΩ•¬¥)",
    " ï‚Ä¢·¥•‚Ä¢ î",
    "·Éö(ÔΩÄ„Éº¬¥·Éö)",
    " ï òÃÖÕú òÃÖ î",
    "Ôºà„ÄÄÔæü–îÔæüÔºâ",
    r"¬Ø\(¬∞_o)/¬Ø",
    "(ÔΩ°‚óï‚Äø‚óïÔΩ°)",
]

RUNS_STR = [
        "Hey! Hara gedirs…ôn?",
    "Ha? N…ô? Nec…ô y…ôni Qa√ßdƒ±lar ?",
    "ZZzzZZzz... Noldu? oh, yen…ô onlarimi≈ü, bo≈ü ver.",
    "Geri g…ôl!",
    "Qa√ßƒ±n OneBot g…ôlir !!",
    "Divara diqq…ôt el…ô !",
    "M…ôni onlarnan t…ôk saxlama !!",
    "Qa√ßsan, √∂l…ôrs…ôn.",
    "Ay s…ôni zarafatcƒ±ƒ±l, m…ôn h…ôr yerd…ôy…ôm.",
    "Bunu el…ôdiyiv…ô g√∂r…ô pe≈üman olacaƒüsan...",
    "/kickme butonunu da yoxlaya bil…ôrs…ôn, …ôyl…ônc…ôli olduƒüunu s√∂yl…ôyirl…ôr.",
    "Get ba≈üqa birini narahat el…ô, burda he√ßkimin vecin…ô deyils…ôn.",
    "Qa√ßa bil…ôrs…ôn amma gizl…ôn…ô bilm…ôzs…ôn.",
    "El…ôy…ôbildikl…ôrin el…ô bu q…ôd…ôrdi ?",
    "Arxandayam...",
    "Qonaƒülarƒ±n var!",
    "Bunu asan yoldan ed…ô bil…ôriy, yada √ß…ôtin yoldan.",
    "Ba≈üa d√º≈üm√ºrs…ôn, el…ô mi?",
    "Haha, qa√ßsan yax≈üƒ± olar.!",
    "Z…ôhm…ôt olmasa, xatƒ±rlat m…ôn…ô n…ô q…ôd…ôr vecim…ôs…ôn?",
    "S…ônin yerind…ô olsam daha da s√ºr…ôtli qa√ßardƒ±m.",
    "Bu tamamiyl…ô axtardƒ±ƒüƒ±mƒ±z robotdu.",
    "B…ôlk…ô b…ôxt s…ôn…ô g√ºl…ôr.",
    "Tanƒ±nmƒ±≈ü son s√∂zl…ôr.",
    "V…ô sonsuza q…ôd…ôr itkin d√º≈üd√ºl…ôr, he√ß g√∂runm…ôdil…ôr.",
    "\"Hey, m…ôn…ô baxƒ±n ! Bottan qa√ßa bilir…ôm √ßox …ôlayam!\" - bu adam",
    "B…ôli b…ôli, /kickme butonuna indid…ôn bas.",
    "Baxƒ±n, bu √ºz√ºy√º alƒ±n v…ô Mordor'a gedin.",
    "∆èfsan…ôy…ô g√∂r…ô onlar h…ôl…ô d…ô i≈ül…ôyir...",
    "Harry Potter'ƒ±n …ôksin…ô, valideyinl…ôrin s…ôni m…ônd…ôn qoruya bilm…ôz.",
    "Qorxu …ôs…ôb…ô, …ôs…ôb nifr…ôt…ô, nifr…ôt acƒ±ya yol a√ßar. Qorxu i√ßind…ô qa√ßmaya davam el…ôs…ôn,"
    "bir sonraki Vader s…ôn olabil…ôrs…ôn.",
    "Bird…ôn √ßox hesablama edildikd…ôn sonra, dalaverelerine olan maraƒüƒ±mƒ±n tam olaraƒü 0‚Äôa b…ôrab…ôr olduƒüuna q…ôrar verdim.",
    "∆èfsan…ôy…ô g√∂r…ô onlar h…ôl…ô d…ô i≈ül…ôyir.",
    "Davam el…ô, s…ôni burda ist…ôdiyimiz…ô …ômin deyil…ôm.",
    "S…ôn bir sihirb- Oh. G√∂zl…ô. Sen Harry deyils…ôn, davam el…ô.",
    "KARƒ∞DORDA QA√áMAYIN!",
    "G√∂r√º≈ü…ôriy b…ôb…ôyim.",
    "Kim itl…ôri buraxdƒ± ?",
    "G√ºlm…ôlidi √ß√ºnk√º he√ßkimin vecin…ô deyil.",
    "Ah, n…ô b√∂y√ºk itki. Bu s…ôf…ôrkini sevmi≈üdim.",
    "A√ßƒ±ƒüƒ± canƒ±m, vecim…ô deyil.",
    "S√ºd√ºm b√ºt√ºn oƒülanlarƒ± avluya √ß…ôkir... Biraz da b…ôrk qa√ß!",
    "Doƒürularƒ± qaldƒ±ra Bƒ∞LM∆èZS∆èN!",
    "Ke√ßmi≈ü zamanlarda, √ßox √ßox uzaƒü bir qalaksid…ô kims…ô vecin…ô ala bil…ôrdi. Amma artƒ±ƒü ele deyil.",
    "Hey, onlara bax! Qa√ßƒ±nƒ±lmaz banhammer'd…ôn qa√ßƒ±rlar... N…ô q…ôd…ôr d…ô ≈üirin.",
    "Han …ôvv…ôl vuruldu. M…ôn d…ô el…ô ed…ôc…ôm",
    "Aƒü dov≈üanƒ±n, arxasƒ±nda n…ô edirs…ôn ?",
    "H…ôkimin d…ô s√∂yl…ôdiyi kimi... QA√á!",
]

HELLOSTR = [
    "Salamm!",
    "N…ô var n…ô yox M√ºd√ºr!",
    "Nec…ôs…ôn‚Äô?",
    "‚ÄòHey N…ô ba≈ü verir?",
    "Salam, salam, salam!",
    "Salamm, kim var orda?, M…ôn danƒ±≈üƒ±ram.",
    "Bunun kim olduƒüunu bilirs…ôn",
    "Hey Yo!",
    "N…ô var n…ô yox.",
    "Salamlar v…ô salamlar !",
    "Salam, g√ºni≈üƒ±ƒüƒ±!",
    "Hey, n…ô var n…ô yox, salam!",
    "Nec…ô gedir‚Äô, balaca civciv?",
    "Ce-e!",
    "Nec…ôs…ôn-doody!",
    "Salam, birinci sinif k√º√ß√ºy√º!",
    "Barƒ±≈üaƒü!",
    "Salam, dostum!",
    "S-salam!",
]

SHGS = [
    "‚îê(¬¥–¥ÔΩÄ)‚îå",
    "‚îê(¬¥ÔΩûÔΩÄ)‚îå",
    "‚îê(¬¥„ÉºÔΩÄ)‚îå",
    "‚îê(Ôø£„ÉòÔø£)‚îå",
    "‚ïÆ(‚ïØ‚àÄ‚ï∞)‚ï≠",
    "‚ïÆ(‚ïØ_‚ï∞)‚ï≠",
    "‚îê(¬¥–¥`)‚îå",
    "‚îê(¬¥‚àÄÔΩÄ)‚îå",
    " Ö(ÃÅ‚ó°‚óù) É",
    "‚îê(ÔæüÔΩûÔæü)‚îå",
    "‚îê('–¥')‚îå",
    "‚îê(‚ÄòÔΩû`;)‚îå",
    "„Éò(¬¥ÔºçÔΩÄ;)„Éò",
    "‚îê( -‚Äú-)‚îå",
    " ÖÔºà¬¥‚óî‡±™‚óîÔºâ É",
    "„ÉΩ(„ÇúÔΩû„Çúo)„Éé",
    "„ÉΩ(~ÔΩû~ )„Éé",
    "‚îê(~„Éº~;)‚îå",
    "‚îê(-„ÄÇ„Éº;)‚îå",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    r"¬Ø\_(‚äô_ ñ‚äô)_/¬Ø",
    r"¬Ø\_‡ºº ‡≤• ‚Äø ‡≤• ‡ºΩ_/¬Ø",
    "‰πÅ( ‚Å∞Õ°  ƒπÃØ ‚Å∞Õ° ) „Ñè",
]

CRI = [
    "ÿ£‚Äøÿ£",
    "‚ï•Ôπè‚ï•",
    "(;Ôπè;)",
    "(ToT)",
    "(‚î≥–î‚î≥)",
    "(‡≤•Ôπè‡≤•)",
    "ÔºàÔºõ„Å∏ÔºöÔºâ",
    "(TÔºøT)",
    "ÔºàœÄ„ÉºœÄÔºâ",
    "(Ôº¥‚ñΩÔº¥)",
    "(‚ãüÔπè‚ãû)",
    "ÔºàÔΩâ–îÔΩâÔºâ",
    "(¬¥–î‚äÇ„ÉΩ",
    "(;–î;)",
    "Ôºà>Ôπè<Ôºâ",
    "(T–¥T)",
    "(„Å§Ôπè‚äÇ)",
    "‡ºº‚òØÔπè‚òØ‡ºΩ",
    "(„ÉéÔπè„ÉΩ)",
    "(„ÉéA„ÉΩ)",
    "(‚ï•_‚ï•)",
    "(T‚åìT)",
    "(‡ºé‡∫∂‚åë‡ºé‡∫∂)",
    "(‚òçÔπè‚Å∞)ÔΩ°",
    "(‡≤•_ ñ‡≤•)",
    "(„Å§–¥‚äÇ)",
    "(‚âñÕû_‚âñÃ•)",
    "(‡ÆáÔπè‡Æá`ÔΩ°)",
    "‡ºº‡≤¢_‡≤¢‡ºΩ",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
]

SLAP_TEMPLATES = [
     "{victim} istifad…ô√ßisini {item} il…ô {hits} .",
    "{victim} istifad…ô√ßisini {item} il…ô √ºz√ºn…ô {hits} .",
    "{victim} istifad…ô√ßisini {item} il…ô biraz {hits} .",
    "{victim} istifad…ô√ßisin…ô {item} {throws} .",
    "{victim} istifad…ô√ßisini {item} il…ô √ºz√ºn…ô {throws} .",
    "{victim} istifad…ô√ßisin…ô t…ôr…ôf {item} atƒ±r.",
    "{victim} axmaqƒ±na {item} il…ô ≈üill…ô vurur.",
    "{victim} istifad…ô√ßisini yere sabitl…ôyib ard-arda {item} il…ô {hits} .",
    "{item} alaraƒü {victim} {hits}.",
    "{victim} istifad…ô√ßisini stola baƒülayƒ±b {item} {throws} .",
    "{victim} istifad…ô√ßisini dost'ca it…ôl…ôy…ôr…ôk lavada √ºzm…ôyi √∂yr…ôdir."
]

ITEMS = [
        "d…ômir tava",
    "b√∂y√ºk alabalƒ±ƒü",
    "beyzbol √ßubuƒüu",
    "kriket √ßubuƒüu",
    "taxta baston",
    "mismar",
    "yazƒ±cƒ±",
    "lapatka",
    "boru monitoru",
    "fizika d…ôft…ôri",
    "krem aparatƒ±",
    "Richard Stallman'ƒ±n portreti",
    "televizor",
    "be≈ü ton kamaz",
    "koli bandajƒ±",
    "kitab",
    "diz√ºst√º komputer",
    "k√∂hn…ô televizor",
    "da≈ülƒ± kis…ô",
    "g√∂yqur≈üaƒüƒ± alabalƒ±ƒüƒ±",
    "plastik c√ºc…ô",
    "mismarlƒ± √ßubuƒü",
    "yanƒüƒ±n s√∂nd√ºr√ºc√º",
    "aƒüƒ±r da≈ü",
    "kir yƒ±ƒüƒ±nƒ±",
    "arƒ± yuvasƒ±",
    "√ß√ºr√ºy …ôt par√ßasƒ±",
    "ayƒ±",
    "tonlarca k…ôrpic",
]

THROW = [
    "atƒ±r",
    "fƒ±rladƒ±r",
    "tullayƒ±r",
    "yaƒüdƒ±rƒ±r",
]

HIT = [
    "vurur",
    "s…ôrt vurur",
    "≈üill…ôl…ôyir",
    "yumruƒülayƒ±r",
    "ke√ßirdir",
]

# ===========================================

@register(outgoing=True, pattern="^.heyvan ?(.*)")
async def hayvan(e):
    arg = e.pattern_match.group(1)
    if arg == "pi≈üik":
        args = "cat"
    elif arg == "it":
        args = "dog"
    elif arg == "qu≈ü":
        args = "birb"
    elif arg == "qurd":
        args = "fox"
    elif arg == "panda":
        args = "panda"
    else:
        arg = "pi≈üik"
        args = "cat"

    foto = requests.get(f'https://some-random-api.ml/img/{args}').json()["link"]
    await e.delete()
    await e.client.send_message(
        e.chat_id,
        f"`T…ôsad√ºfi bir {arg} fotosu`",
        file=foto
    )

@register(outgoing=True, pattern="^.q…ôrar$")
async def karar(e):
    msaj = ""
    if e.reply_to_msg_id:
        rep = await e.get_reply_message()
        replyto = rep.id
        msaj += f"[Dostum](tg://user?id={rep.from_id}), "
    else:
        e.edit("`Xai≈ü bir mesaja cavab verin`")
        return
    yesno = requests.get('https://yesno.wtf/api').json()
    if yesno["answer"] == "yes":
        cevap = "b…ôli"
    else:
        cevap = "xeyr"
    msaj += f"Dey…ôs…ôn buna {cevap} dey…ôc…ôy…ôm."

    await e.delete()
    await e.client.send_message(
        e.chat_id,
        msaj,
        reply_to=replyto,
        file=yesno["image"]
    )

@register(outgoing=True, pattern=r"^.(\w+)say (.*)")
async def univsaye(cowmsg):
    """ .cowsay"""
    arg = cowmsg.pattern_match.group(1).lower()
    text = cowmsg.pattern_match.group(2)

    if arg == "cow":
        arg = "default"
    if arg not in cow.COWACTERS:
        return
    cheese = cow.get_cow(arg)
    cheese = cheese()

    await cowmsg.edit(f"`{cheese.milk(text).replace('`', '¬¥')}`")


@register(outgoing=True, pattern="^:/$", ignore_unsafe=True)
async def kek(keks):
    """  ;)"""
    uio = ["/", "\\"]
    for i in range(1, 15):
        time.sleep(0.3)
        await keks.edit(":" + uio[i % 2])


@register(pattern="^.slap(?: |$)(.*)", outgoing=True)
async def who(event):
    """ .slap, """
    replied_user = await get_user_from_event(event)
    if replied_user:
        replied_user = replied_user[0]
    else:
        return
    caption = await slap(replied_user, event)

    try:
        await event.edit(caption)

    except BaseException:
        await event.edit(
            "`Bu istifad…ô√ßini ≈üill…ôl…ôy…ô bilm…ôr…ôm, yanƒ±ma bita v…ô da≈ü almalƒ±yam !!`"
        )


async def slap(replied_user, event):
    """ !! """
    user_id = replied_user.id
    first_name = replied_user.first_name
    username = replied_user.username

    if username:
        slapped = "@{}".format(username)
    else:
        slapped = f"[{first_name}](tg://user?id={user_id})"

    temp = choice(SLAP_TEMPLATES)
    item = choice(ITEMS)
    hit = choice(HIT)
    throw = choice(THROW)

    caption = "C Y B E R " + temp.format(
        victim=slapped, item=item, hits=hit, throws=throw)

    return caption


@register(outgoing=True, pattern="^-_-$", ignore_unsafe=True)
async def lol(lel):
    okay = "-_-"
    for i in range(10):
        okay = okay[:-1] + "_-"
        await lel.edit(okay)


@register(outgoing=True, pattern="^;_;$", ignore_unsafe=True)
async def fun(e):
    t = ";_;"
    for j in range(10):
        t = t[:-1] + "_;"
        await e.edit(t)


@register(outgoing=True, pattern="^.fp$")
async def facepalm(e):
    await e.edit("ü§¶‚Äç‚ôÇ")


@register(outgoing=True, pattern="^.cry$")
async def cry(e):
    await e.edit(choice(CRI))


@register(outgoing=True, pattern="^.cp(?: |$)(.*)")
async def copypasta(cp_e):
    textx = await cp_e.get_reply_message()
    message = cp_e.pattern_match.group(1)

    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await cp_e.edit("`üòÇM…ôn…ôüíØBiR‚úåÔ∏èm∆èTInüëêVerüëè`")
        return

    reply_text = choice(EMOJIS)
    b_char = choice(message).lower()
    for owo in message:
        if owo == " ":
            reply_text += choice(EMOJIS)
        elif owo in EMOJIS:
            reply_text += owo
            reply_text += choice(EMOJIS)
        elif owo.lower() == b_char:
            reply_text += "üÖ±Ô∏è"
        else:
            if bool(getrandbits(1)):
                reply_text += owo.upper()
            else:
                reply_text += owo.lower()
    reply_text += choice(EMOJIS)
    await cp_e.edit(reply_text)


@register(outgoing=True, pattern="^.vapor(?: |$)(.*)")
async def vapor(vpr):
    """ ! """
    reply_text = []
    textx = await vpr.get_reply_message()
    message = vpr.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await vpr.edit("`M …ô n …ô  ÔΩÇÔΩâÔΩí m …ô t i n  ÔΩñÔΩÖÔΩí!`")
        return

    for charac in message:
        if 0x21 <= ord(charac) <= 0x7F:
            reply_text.append(chr(ord(charac) + 0xFEE0))
        elif ord(charac) == 0x20:
            reply_text.append(chr(0x3000))
        else:
            reply_text.append(charac)

    await vpr.edit("".join(reply_text))


@register(outgoing=True, pattern="^.str(?: |$)(.*)")
async def stretch(stret):
    """ ."""
    textx = await stret.get_reply_message()
    message = stret.text
    message = stret.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await stret.edit("`M…ô…ô…ô…ôn…ô…ô…ô…ô biiiiir m…ô…ô…ô…ô…ôtiiiiin veeeeer!`")
        return

    count = randint(3, 10)
    reply_text = sub(r"([aeiouAEIOUÔΩÅÔΩÖÔΩâÔΩèÔΩïÔº°Ôº•Ôº©ÔºØÔºµ–∞–µ–∏–æ—É—é—è—ã—ç—ë])", (r"\1" * count),
                     message)
    await stret.edit(reply_text)


@register(outgoing=True, pattern="^.zal(?: |$)(.*)")
async def zal(zgfy):
    """ . """
    reply_text = []
    textx = await zgfy.get_reply_message()
    message = zgfy.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await zgfy.edit(
            "`Ôº¢Õ¨Ã∫ÔΩÅÕëÃ†ÔΩéÃµÃâÔΩÅÃ¨Õú ÔΩÇÕîÃ∂ÔΩâÃºÕöÔΩíÕàÕû ÔΩçÃºÕòÔΩÖÃ®ÃùÔΩîÕîÕôÔΩâÕÆÃ¢ÔΩéÃúÕó ÔΩñÕ¢ÕúÔΩÖÕêÃóÔΩíÕÆÃ¥`"
        )
        return

    for charac in message:
        if not charac.isalpha():
            reply_text.append(charac)
            continue

        for _ in range(0, 3):
            charac += choice(ZALG_LIST[randint(0,2)]).strip()

        reply_text.append(charac)

    await zgfy.edit("".join(reply_text))
    

@register(outgoing=True, pattern="^.hi$")
async def hoi(hello):
    """ salamda salam """
    await hello.edit(choice(HELLOSTR))


@register(outgoing=True, pattern="^.owo(?: |$)(.*)")
async def faces(owo):
    """ UwU """
    textx = await owo.get_reply_message()
    message = owo.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await owo.edit("` UwU m…ôn…ô bir m…ôtin ver! `")
        return

    reply_text = sub(r"(r|l)", "w", message)
    reply_text = sub(r"(R|L)", "W", reply_text)
    reply_text = sub(r"n([aeiou])", r"ny\1", reply_text)
    reply_text = sub(r"N([aeiouAEIOU])", r"Ny\1", reply_text)
    reply_text = sub(r"\!+", " " + choice(UWUS), reply_text)
    reply_text = reply_text.replace("ove", "uv")
    reply_text += " " + choice(UWUS)
    await owo.edit(reply_text)


@register(outgoing=True, pattern="^.react$")
async def react_meme(react):
    """ . """
    await react.edit(choice(FACEREACTS))


@register(outgoing=True, pattern="^.shg$")
async def shrugger(shg):
    r""" ¬Ø\_(„ÉÑ)_/¬Ø """
    await shg.edit(choice(SHGS))


@register(outgoing=True, pattern="^.run$")
async def runner_lol(run):
    await run.edit(choice(RUNS_STR))


@register(outgoing=True, pattern="^oof$")
async def oof(e):
    t = "oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)

                      
@register(outgoing=True, pattern="^Oof$")
async def Oof(e):
    t = "Oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)


@register(outgoing=True, pattern="^skrrt$")
async def oof(e):
    t = "skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)
        

@register(outgoing=True, pattern="^Skrrt$")
async def oof(e):
    t = "Skrrt"
    for j in range(16):
        t = t[:-1] + "rt"
        await e.edit(t)


@register(outgoing=True, pattern="^.fuk")
async def fuk(event):
    if event.fwd_from:
        return
    animation_interval = 0.1
    animation_ttl = range(0, 101)
    animation_chars = [
            "üçÜ       üçëÔ∏è",
            "üçÜ     üçëÔ∏è",
            "üçÜ  üçëÔ∏è",
            "üçÜüçëÔ∏èüí¶"
    ]
    for i in animation_ttl:
        await asyncio.sleep(animation_interval)
        await event.edit(animation_chars[i % 4])


@register(outgoing=True, pattern="^.urek (.*)")
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    deq = deque(list("Ô∏è‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§"))
    for _ in range(32):
        await asyncio.sleep(0.1)
        await event.edit("".join(deq))
        deq.rotate(1)
    await event.edit("‚ù§Ô∏èüß°üíõ" + input_str + "üíöüíôüíúüñ§")

@register(outgoing=True, pattern="^.mizah$")
async def mizahshow(e):
    await e.edit(
    "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èMmMmMmMizahh ≈ûowwüò®üò®üò®üò®üò±üò±üò±üò±üò± \n"
    "üò±üò±‚ö†Ô∏è‚ö†Ô∏è üòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇüò±üòµ \n"
    "üòÇüòÇüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëçüëç MiZah \n"
    "≈û…ôLaLesNd∆èn b1r yUdm aLdƒ±m‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è \n"
    "AHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHHAHAHAHAHA \n"
    "HAHAHAHAHAHAHHAHAHAHAHAHAHAüòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ G√úLD√úM ALA G√úLD√ú√úM \n"
    "hALaL LaN ‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏è‚úîÔ∏èüëèüëèüëèüëèüëèüëèüëèüëè \n"
    "üëè ∆èfSaN…ô mMmMiZah ≈üooooovv üëèüëèüëèüëèüëèüòÇüòÇüòÇüòÇ \n"
    "üòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è \n"
    "üíØüíØüíØüíØüíØüíØüíØüíØüíØ \n"
    "DSTM EYNI Bƒ∞ƒ∞ƒ∞Z üòÇüòÇüòÇüëèüëè \n"
    "üíØüíØ‚ö†Ô∏è‚ö†Ô∏è‚ôøÔ∏èA√á YOLU POST SAHƒ∞Bƒ∞ VE ONU ‚ôøÔ∏èQORUYANLAR \n"
    "G∆èLƒ∞R ‚ôøÔ∏è‚ôøÔ∏è D√ú√úTT‚ôøÔ∏è \n"
    "D√ú√ú√ú√úT‚ôøÔ∏èD√ú√úT‚ôøÔ∏èüíØüíØ‚ö†Ô∏è \n"
    "‚ôøÔ∏èG√úLM∆èLƒ∞Dƒ∞ ‚ôøÔ∏è \n"
    "CJWJCJWJXJJWDJJQUXJAJXJAJXJWJFJWJXJAJXJWJXJWJFIWIXJQJJQJASJAXJ \n"
    "AJXJAJXJJAJXJWJFWJJFWIIFIWICIWIFIWICJAXJWJFJEICIIEICIEIFIWICJSXJJS \n"
    "CJEIVIAJXBWJCJIQICIWJXüíØüíØüíØüíØüíØüíØüòÇüòÇüòÇüòÇüòÇüòÇüòÇ \n"
    "üòÇ‚ö†Ô∏èüòÇüòÇüòÇüòÇüòÇüòÇ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èüòÇüòÇüòÇüòÇ‚ôøÔ∏è‚ôøÔ∏è‚ôøÔ∏èüòÖüòÖ \n"
    "üòÖüòÇüëèüíØ‚ö†Ô∏èüëè‚ôøÔ∏èüö®"
    )    


@register(outgoing=True, pattern="^.moon$")
async def moon(event):
    deq = deque(list("üåóüåòüåëüåíüåìüåîüåïüåñ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.clock$")
async def clock(event):
    deq = deque(list("üïôüïòüïóüïñüïïüïîüïìüïíüïëüïêüïõ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.mock(?: |$)(.*)")
async def spongemocktext(mock):
    """ . """
    reply_text = []
    textx = await mock.get_reply_message()
    message = mock.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await mock.edit("`m∆èN…ô bIr m∆èTin vEr!`")
        return

    for charac in message:
        if charac.isalpha() and randint(0, 1):
            to_app = charac.upper() if charac.islower() else charac.lower()
            reply_text.append(to_app)
        else:
            reply_text.append(charac)

    await mock.edit("".join(reply_text))


@register(outgoing=True, pattern="^.clap(?: |$)(.*)")
async def claptext(memereview):
    """ ! """
    textx = await memereview.get_reply_message()
    message = memereview.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await memereview.edit("`Hƒ±h, bo≈ü yer…ô alqƒ±≈ülamƒ±ram! üòí`")
        return
    reply_text = "üëè "
    reply_text += message.replace(" ", " üëè ")
    reply_text += " üëè"
    await memereview.edit(reply_text)


@register(outgoing=True, pattern=r"^.f (.*)")
async def payf(event):
    paytext = event.pattern_match.group(1)
    pay = "{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}".format(
        paytext * 8, paytext * 8, paytext * 2, paytext * 2, paytext * 2,
        paytext * 6, paytext * 6, paytext * 2, paytext * 2, paytext * 2,
        paytext * 2, paytext * 2)
    await event.edit(pay)

@register(outgoing=True, pattern=r"^.ƒü (.*)")
async def payg(event):
    g = """
     „Ö§ 
          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è

          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
     ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
   ‚ù§Ô∏è‚ù§Ô∏è                     ‚ù§Ô∏è‚ù§Ô∏è
 ‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è                ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è                ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
 ‚ù§Ô∏è‚ù§Ô∏è                        ‚ù§Ô∏è‚ù§Ô∏è
   ‚ù§Ô∏è‚ù§Ô∏è                     ‚Ää‚ù§Ô∏è‚ù§Ô∏è
     ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
          ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
"""
    paytext = event.pattern_match.group(1)
    await event.edit(g.replace('‚ù§Ô∏è', paytext))

@register(outgoing=True, pattern=r"^.bo[s≈ü]luq")
async def bosluk(event):
    await event.delete()
    await event.reply('„Ö§')

@register(outgoing=True, pattern="^.lfy (.*)")
async def let_me_google_that_for_you(lmgtfy_q):
    textx = await lmgtfy_q.get_reply_message()
    qry = lmgtfy_q.pattern_match.group(1)
    if qry:
        query = str(qry)
    elif textx:
        query = textx
        query = query.message
    query_encoded = query.replace(" ", "+")
    lfy_url = f"http://lmgtfy.com/?s=g&iie=1&q={query_encoded}"
    payload = {'format': 'json', 'url': lfy_url}
    r = requests.get('http://is.gd/create.php', params=payload)
    await lmgtfy_q.edit(f"Hazƒ±rdƒ±r kef el…ô.\
    \n[{query}]({r.json()['shorturl']})")


@register(pattern=r".scam(?: |$)(.*)", outgoing=True)
async def scam(event):
    """ !! """
    options = [
        'typing', 'contact', 'game', 'location', 'voice', 'round', 'video',
        'photo', 'document', 'cancel'
    ]
    input_str = event.pattern_match.group(1)
    args = input_str.split()
    if len(args) == 0:
        scam_action = choice(options)
        scam_time = randint(30, 60)
    elif len(args) == 1:
        try:
            scam_action = str(args[0]).lower()
            scam_time = randint(30, 60)
        except ValueError:
            scam_action = choice(options)
            scam_time = int(args[0])
    elif len(args) == 2:
        scam_action = str(args[0]).lower()
        scam_time = int(args[1])
    else:
        await event.edit("`Yanlƒ±≈ü sintaksis !!`")
        return
    try:
        if (scam_time > 0):
            await event.delete()
            async with event.client.action(event.chat_id, scam_action):
                await sleep(scam_time)
    except BaseException:
        return


@register(pattern=r".type(?: |$)(.*)", outgoing=True)
async def typewriter(typew):
    """ . """
    textx = await typew.get_reply_message()
    message = typew.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await typew.edit("`M…ôn…ô bir m…ôtin ver!`")
        return
    sleep_time = 0.03
    typing_symbol = "|"
    old_text = ""
    await typew.edit(typing_symbol)
    await sleep(sleep_time)
    for character in message:
        old_text = old_text + "" + character
        typing_text = old_text + "" + typing_symbol
        await typew.edit(typing_text)
        await sleep(sleep_time)
        await typew.edit(old_text)
        await sleep(sleep_time)

CmdHelp('memes').add_command(
    'heyvan', 'pi≈üik/it/panda/qu≈ü/qurd', 'T…ôsadufi bir heyvan fotosu atar.'
).add_command(
    'cowsay', None, 'Bir ≈üeyl…ôr danƒ±≈üan in…ôk'
).add_command(
    ':/', None, '√úzg√ºn animasiya.'
).add_command(
    'q…ôrar', None, 'Q…ôrar verin.'
).add_command(
    '-_-', None, 'Tamamdƒ±r.\n-Bird…ôn…ôm ustam'
).add_command(
    ';_;', None, 'Animasiya.'
).add_command(
    'cp', '<cavab>', 'Emoji falan …ôlav…ô edir.'
).add_command(
    'vapor', '<mesaj/cavab>', 'Vaporla≈üdƒ±rƒ±n!'
).add_command(
    'str', '<yazƒ±>', 'Yazƒ±yƒ± uzadƒ±n.'
).add_command(
    '10iq', None, 'mesaj yazƒ±r....'
).add_command(
    'mizah', None, 'Mizah animasyonu.'
).add_command(
    'zal', '<cavablama/mesaj>', '√áox qarma≈üƒ±q! H…ôr ≈üey √ßox qarma≈üƒ±q.'
).add_command(
    'oof', None, 'of dana'
).add_command(
    'skrrt', None, 'sƒ±kƒ±rt'
).add_command(
    'fuk', None, '+18'
).add_command(
    'urek', '<ad>', 'Sevginizi g√∂st…ôrin.'
).add_command(
    'fp', None, 'Utanmaq.'
).add_command(
    'moon', None, 'Ay animasiyasƒ±.'
).add_command(
    'clock', None, 'Animasiya. (Saat animasiyasƒ±)'
).add_command(
    'hi', None, 'Salam verin.'
).add_command(
    'owo', None, 'OwoooooWoooo'
).add_command(
    'react', None, 'Dƒ±tƒ±yƒ±zƒ±rbotun h…ôr ≈üey…ô h…ôr…ôk…ôt verm…ôsini d√ºz…ôldin.'
).add_command(
    'slap', '<cavab>', 'T…ôsadufi ≈üeyl…ôrl…ô ≈üill…ôl…ôm…ôk √º√ß√ºn mesaja cavab verin.'
).add_command(
    'cry', None, 'Aƒülamaq mƒ± istiyirs…ôn?'
).add_command(
    'shg', None, '¬Ø\_(„ÉÑ)_/¬Ø'
).add_command(
    'run', None, 'Qa√ß!'
).add_command(
    'mock', '<cavab/mesaj>', 'El…ô v…ô real …ôyl…ônc…ôni tap.'
).add_command(
    'clap', None, 'M…ôni, yapraqlar deyil Yuzurbotlar alqƒ±≈ülƒ±yƒ±r!'
).add_command(
    'f', '<mesaj>', 'F'
).add_command(
    'type', '<yazƒ±>', 'Daktilo kimi yazƒ± yazƒ±n.'
).add_command(
    'lfy', '<sorƒüu>', 'Buraxƒ±n Google bunu sizin √º√ß√ºn ara≈üdƒ±rsƒ±n.'
).add_command(
    'scam', '<h…ôr…ôk…ôt> <vaxt>', 'Saxta h…ôr…ôk…ôtl…ôr yaradƒ±n.\nM√∂vcus h…ôr…ôk…ôtl…ôr: (typing, contact, game, location, voice, round, video, photo, document, cancel)'
).add_command(
    'lfy', '<sorƒüu>', 'Buraxƒ±n Google bunu sizin √º√ß√ºn ara≈üdƒ±rsƒ±n.'
).add_command(
    'bo≈üluq', None, 'Bo≈ü mesaj.'
).add_command(
    'ƒü', '<mesaj>', 'ƒû'
).add()
