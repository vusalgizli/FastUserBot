# Copyright (C) 2021-2022 FastUserBot

import importlib
from importlib import import_module
from sqlite3 import connect
import time
import os
from pathlib import Path
import sys
import requests
import asyncio

from telethon.tl.types import InputMessagesFilterDocument
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError
from telethon.tl.functions.channels import GetMessagesRequest
from . import BRAIN_CHECKER, LOGS, bot, PLUGIN_CHANNEL_ID, CMD_HELP, LANGUAGE, FAST_VERSION, PATTERNS, BOTLOG_CHATID, BOTLOG, StartTime
from .modules import ALL_MODULES
import userbot.modules.sql_helper.mesaj_sql as MSJ_SQL
import userbot.modules.sql_helper.galeri_sql as GALERI_SQL
from pySmartDL import SmartDL
from random import randint
from telethon.tl import functions

from random import choice
import chromedriver_autoinstaller
from json import loads, JSONDecodeError
import re
from asyncio import get_event_loop
import userbot.cmdhelp

from userbot import DEFAULT_NAME, SAHIB_ID, SON_GORULME
from time import time
import userbot.events
from userbot.events import start_fast_assistant

FAST_NAME = f"[{DEFAULT_NAME}](tg://user?id={SAHIB_ID})"
QRUP = BOTLOG_CHATID

def fast_time(seconds, short=True):
    minutes, seconds = divmod(int(seconds), 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)
    tmp = ((str(days) + (" g√ºn, " if not short else "g, ")) if days else "") + \
        ((str(hours) + (" saat, " if not short else "s, ")) if hours else "") + \
        ((str(minutes) + (" d…ôqiq…ô, " if not short else "d, ")) if minutes else "") + \
        ((str(seconds) + (" saniy…ô, " if not short else "s, ")) if seconds else "")
    return tmp[:-2] + " …ôvv…ôl"

notafk = round(time() - SON_GORULME)
noe = fast_time(notafk)
noe2 = fast_time(notafk, False)
NO_AFK_TIME = noe2

ALIVE_STR = [
    "`F A S T` {mention}-un `…ômirl…ôrin…ô hazƒ±rdƒ±r...`",
    "`Hey` {mention} `narahat olma F A S T …ôla i≈ül…ôyir...`",
    "‚ú® `F A S T` **{mention}**-in `…ômirl…ôrin…ô hazƒ±rdƒ±r...`",
    "‚õàÔ∏è {mention} `…ôlimd…ôn g…ôl…ônin …ôn yax≈üƒ±sƒ±nƒ± etm…ôy…ô hazƒ±ram...`",
]

LOGO_STR = [
    "https://telegra.ph/file/c3e75eccaeb7f56dfae89.mp4",
]


KICKME_STR = [
    "Bye bye m…ôn gedir…ôm! ü¶¶",
    "Qrupu t…ôrk edir…ôm! üòí",
    "Qrupdan √ßƒ±xƒ±ram..\nBir daha d√∂nm…ôm…ôk ≈ü…ôrti il…ô!",
    "Qrupdan ayrƒ±lƒ±ram... ü¶¶",
]

NON_AFK = [
    f"`Artƒ±q AFK deyil…ôm.`",
    f"{FAST_NAME} `artƒ±q AFK deyil.`",
    f"{FAST_NAME} `buradadƒ±r!`",
    f"{FAST_NAME} `g…ôldi!‚ú®`",
    f"{FAST_NAME} `artƒ±q sizinl…ôdir!`",
]

DIZCILIK_STR = [
    "Stikeri oƒüurlayƒ±ram...",
    "Bu stikeri √ßox b…ôy…ôndimmm...",
    "Bu stikeri √∂z paketim…ô …ôlav…ô edir…ôm...",
    "Bunu oƒüurlamalƒ±yamm...",
    "Hey bu …ôla stikerdir!\nEl…ô indi oƒüurlayƒ±ram..",
    "Stikerini oƒüurladƒ±m\nhahaha.",
    "Hey bura bax. (‚òâÔΩ°‚òâ)!‚Üí\nM…ôn bunu oƒüurlayark…ôn...",
    "Bu stikeri paketim…ô …ôlav…ô edir…ôm...",
    "Stiker paket…ô …ôlav…ô edilir...",
    "Stikeri √∂z paketim…ô …ôlav…ô edir…ôm... ",
]

AFKSTR = [
    "ƒ∞ndi vacib i≈üim var, daha sonra mesaj atsan olmaz? Onsuzda yen…ô g…ôl…ôc…ôm.\nSahibim `{last_seen_long}` aktiv idi.",
    "H√∂rm…ôtli istifad…ô√ßi z…ông etdiyiniz ≈ü…ôxs hazƒ±rda telefona cavab ver…ô bilmir.\nSahibim `{last_seen_long}` aktiv idi.",
    "Bir ne√ß…ô d…ôqiq…ô i√ßind…ô g…ôl…ôc…ôm lakin g…ôlm…ôs…ôm...\nbiraz daha g√∂zl…ô.\nSahibim `{last_seen_long}` aktiv idi.",
    "ƒ∞ndi burada deyil…ôm..\nY…ôqin ki, ba≈üqa bir yerd…ôy…ôm..\nSahibim `{last_seen_long}` aktiv idi.",
    "Sahibim hal-hazƒ±rda AFK-dƒ±r!\nSahibim `{last_seen_long}` aktiv idi.",
    "B…ôz…ôn h…ôyatdakƒ± …ôn yax≈üƒ± ≈üeyl…ôr g√∂zl…ôm…ôy…ô d…ôy…ôr‚Ä¶\nG…ôl…ôc…ôm.\nSahibim `{last_seen_long}` aktiv idi.",
    "G…ôl…ôc…ôm,\namma …ôg…ôr g…ôlm…ôs…ôm,\ndaha sonra g…ôl…ôr…ôm.\nSahibim `{last_seen_long}` aktiv idi.",
    "Hal-hazƒ±rda sahibim burada deyil.\nXahi≈ü edir…ôm biraz sonra …ôlaq…ô saxlayƒ±n.\nSahibim `{last_seen_long}` aktiv idi.",
    "√áox heyif ki sahibim burada deyil..\nSahibim `{last_seen_long}` aktiv idi.",
    "ƒ∞ndi burada deyil…ôm..\nTezlikl…ô qayƒ±dacaƒüam..\nSahibim `{last_seen_long}` aktiv idi.",
    "Sahibim burada deyil..\nqayƒ±danda sizinl…ô …ôlaq…ô saxlayacaqdƒ±r.\nSahibim `{last_seen_long}` aktiv idi.",
    "G…ôl…ôc…ôm,\namma …ôg…ôr g…ôlm…ôs…ôm,\ndaha sonra g…ôl…ôr…ôm.\nSahibim `{last_seen_long}` aktiv idi.",
    "Bir ne√ß…ô d…ôqiq…ô i√ßind…ô g…ôl…ôc…ôm lakin g…ôlm…ôs…ôm..\nbiraz daha g√∂zl…ô.\nSahibim `{last_seen_long}` aktiv idi.",
    "Hey, sahibim hal-hazƒ±rda burada deyil..\nqayƒ±tdƒ±ƒüƒ±nda sizinl…ô …ôlaq…ô saxlayacaqdƒ±r.\nSahibim `{last_seen_long}` aktiv idi.",
]

UNAPPROVED_MSG = ("`Salam,` {mention} `\nBu bir avtomatik mesajdƒ±r.\nNarahat olma.\n\n`"
                  "`Sahibim s…ôn…ô PM yazma icaz…ôsi verm…ôyib. `"
                  "`Z…ôhm…ôt olmasa sahibimin aktiv olmasƒ±nƒ± g√∂zl…ôyin, o b…ôz…ôn PM yazmaƒüa icaz…ô ver…ôr.\n\n`"
                  "`Bildiyim q…ôd…ôri il…ô o beynini itirib insanlara PM icaz…ôsi vermir.`")

DB = connect("learning-data-root.check")
CURSOR = DB.cursor()
CURSOR.execute("""SELECT * FROM BRAIN1""")
ALL_ROWS = CURSOR.fetchall()
INVALID_PH = '\nX∆èTA: Yazƒ±lan telefon n√∂mr…ôsi yanlƒ±≈üdƒ±r' \
             '\n  Tips: √ñlk…ô kodunu istifad…ô ed…ôr…ôk yenid…ôn yaz' \
             '\n       Telefon n√∂mr…ônizi kontrol edin.'

for i in ALL_ROWS:
    BRAIN_CHECKER.append(i[0])
connect("learning-data-root.check").close()

def extractCommands(file):
    FileRead = open(file, 'r').read()
    
    if '/' in file:
        file = file.split('/')[-1]

    Pattern = re.findall(r"@register\(.*pattern=(r|)\"(.*)\".*\)", FileRead)
    Komutlar = []

    if re.search(r'CmdHelp\(.*\)', FileRead):
        pass
    else:
        dosyaAdi = file.replace('.py', '')
        CmdHelp = userbot.cmdhelp.CmdHelp(dosyaAdi, False)

       
        for Command in Pattern:
            Command = Command[1]
            if Command == '' or len(Command) <= 1:
                continue
            Komut = re.findall("(^.*[a-zA-Z0-9≈üƒü√º√∂√ßƒ±]\w)", Command)
            if (len(Komut) >= 1) and (not Komut[0] == ''):
                Komut = Komut[0]
                if Komut[0] == '^':
                    KomutStr = Komut[1:]
                    if KomutStr[0] == '.':
                        KomutStr = KomutStr[1:]
                    Komutlar.append(KomutStr)
                else:
                    if Command[0] == '^':
                        KomutStr = Command[1:]
                        if KomutStr[0] == '.':
                            KomutStr = KomutStr[1:]
                        else:
                            KomutStr = Command
                        Komutlar.append(KomutStr)

           
            Fastpy = re.search('\"\"\"FASTPY(.*)\"\"\"', FileRead, re.DOTALL)
            if not Fastpy is None:
                Fastpy = Fastpy.group(0)
                for Satir in Fastpy.splitlines():
                    if (not '"""' in Satir) and (':' in Satir):
                        Satir = Satir.split(':')
                        Isim = Satir[0]
                        Deger = Satir[1][1:]
                                
                        if Isim == 'INFO':
                            CmdHelp.add_info(Deger)
                        elif Isim == 'WARN':
                            CmdHelp.add_warning(Deger)
                        else:
                            CmdHelp.set_file_info(Isim, Deger)
            for Komut in Komutlar:
                # if re.search('\[(\w*)\]', Komut):
                    # Komut = re.sub('(?<=\[.)[A-Za-z0-9_]*\]', '', Komut).replace('[', '')
                CmdHelp.add_command(Komut, None, 'Bu plugin xaricd…ôn y√ºkl…ônib, h…ôr hansƒ± bir a√ßƒ±qlama qeyd olunmayƒ±b.')
            CmdHelp.add()

try:
    bot.start()
    idim = bot.get_me().id
    fastbl = requests.get('https://raw.githubusercontent.com/FastUserBot/FastUserBot/main/fastbl.json').json()
    if idim in fastbl:
        bot.send_message("me", "**FAST USERBOT adminl…ôri t…ôr…ôfind…ôn botdan istifad…ô haqqƒ±nƒ±z alƒ±ndƒ±.**\n**S…ôb…ôb:** `None`")
        bot.disconnect()

    
    try:
        chromedriver_autoinstaller.install()
    except:
        pass
    
    
    GALERI = {}

    PLUGIN_MESAJLAR = {}
    ORJ_PLUGIN_MESAJLAR = {"alive": f"{str(choice(ALIVE_STR))}", "afk": f"`{str(choice(AFKSTR))}`", "kickme": f"{str(choice(KICKME_STR))}", "pm": UNAPPROVED_MSG, "dƒ±zcƒ±": str(choice(DIZCILIK_STR)), "ban": "{mention}`, Banlandƒ±!`", "mute": "{mention}`, s…ôssiz…ô alƒ±ndƒ±!`", "approve": "{mention}`, artƒ±q m…ôn…ô mesaj g√∂nd…ôr…ô bil…ôrs…ôn!`", "disapprove": "{mention}`, artƒ±q m…ôn…ô mesaj g√∂nd…ôr…ô bilm…ôzs…ôn!`", "block": "{mention}`, s…ôni …ông…ôll…ôdim!`", "nonafk": f"{str(choice(NON_AFK))}", "salive": "https://telegra.ph/file/c3e75eccaeb7f56dfae89.mp4"}

    PLUGIN_MESAJLAR_TURLER = ["alive", "afk", "kickme", "pm", "dƒ±zcƒ±", "ban", "mute", "approve", "disapprove", "block", "nonafk", "salive"]
    for mesaj in PLUGIN_MESAJLAR_TURLER:
        dmsj = MSJ_SQL.getir_mesaj(mesaj)
        if dmsj is False:
            PLUGIN_MESAJLAR[mesaj] = ORJ_PLUGIN_MESAJLAR[mesaj]
        else:
            if dmsj.startswith("MEDYA_"):
                medya = int(dmsj.split("MEDYA_")[1])
                medya = bot.get_messages(PLUGIN_CHANNEL_ID, ids=medya)

                PLUGIN_MESAJLAR[mesaj] = medya
            else:
                PLUGIN_MESAJLAR[mesaj] = dmsj
    if not PLUGIN_CHANNEL_ID is None:
        LOGS.info("Plugins installing...")
        try:
            KanalId = bot.get_entity(PLUGIN_CHANNEL_ID)
        except:
            KanalId = "me"

        for plugin in bot.iter_messages(KanalId, filter=InputMessagesFilterDocument):
            if plugin.file.name and (len(plugin.file.name.split('.')) > 1) \
                and plugin.file.name.split('.')[-1] == 'py':
                Split = plugin.file.name.split('.')

                if not os.path.exists("./userbot/modules/" + plugin.file.name):
                    dosya = bot.download_media(plugin, "./userbot/modules/")
                else:
                    LOGS.info("Bu plugin onsuzda y√ºkl√ºd√ºr " + plugin.file.name)
                    extractCommands('./userbot/modules/' + plugin.file.name)
                    dosya = plugin.file.name
                    continue 
                
                try:
                    spec = importlib.util.spec_from_file_location("userbot.modules." + Split[0], dosya)
                    mod = importlib.util.module_from_spec(spec)

                    spec.loader.exec_module(mod)
                except Exception as e:
                    LOGS.info(f"Y√ºkl…ôm…ôd…ô problem! Plugin x…ôtalƒ±dƒ±r.\n\nX…ôta: {e}")

                    try:
                        plugin.delete()
                    except:
                        pass

                    if os.path.exists("./userbot/modules/" + plugin.file.name):
                        os.remove("./userbot/modules/" + plugin.file.name)
                    continue
                extractCommands('./userbot/modules/' + plugin.file.name)
    else:
        bot.send_message("me", f"`Xahi≈ü edir…ôm pluginl…ôrin qalƒ±cƒ± olmasƒ± √º√ß√ºn PLUGIN_CHANNEL_ID'i ayarlayƒ±n.`")
except PhoneNumberInvalidError:
    print(INVALID_PH)
    sys.exit(1)
    
async def get_readable_time(seconds: int) -> str:
    count = 0
    up_time = ""
    time_list = []
    time_suffix_list = ["saniy…ô", "d…ôqiq…ô", "saat", "g√ºn"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        up_time += time_list.pop() + ", "

    time_list.reverse()
    up_time += ", ".join(time_list)

    return up_time


async def startupcyber():
    try:
        if QRUP != 0:
            await bot.send_message(
                QRUP,
                f"**Salam! M…ôn ùìïùìêùì¢ùì£ ùì§ùì¢ùìîùì° ùìëùìûùì£**\n**Botumuzu qurduƒüunuz √º√ß√ºn t…ô≈ü…ôkk√ºr edir…ôm!**\n**Botunuz aktivdir.**\n\n**ùìïùìêùì¢ùì£ Version:** **{FAST_VERSION}**\n**Plugin sayƒ±: {len(CMD_HELP)}**\n**Sahib: {FAST_NAME}**\n**Plugin kanalƒ±:** @FastPlugins\n**FAST ADMIN Hey…ôti:** @FastMMC\n\n**Yardƒ±ma ehtiyyacƒ±nƒ±z olarsa @FastSupp qrupuna yazƒ±n :)**",
            )
    except Exception as e:
        LOGS.info(str(e))


async def FotoDegistir (foto):
    FOTOURL = GALERI_SQL.TUM_GALERI[foto].foto
    r = requests.get(FOTOURL)

    with open(str(foto) + ".jpg", 'wb') as f:
        f.write(r.content)    
    file = await bot.upload_file(str(foto) + ".jpg")
    try:
        await bot(functions.photos.UploadProfilePhotoRequest(
            file
        ))
        return True
    except:
        return False

aktiv_et = "ON"

async def asistan_aktiv_et():
    if aktiv_et == "ON":
        import glob

        path = "userbot/modules/assistant/*.py"
        fayl = glob.glob(path)
        for name in fayl:
            with open(name) as f:
                path1 = Path(f.name)
                shortname = path1.stem
                start_fast_assistant(shortname.replace(".py", ""))
    else:
        print("Asistan qurulark…ôn x…ôta ba≈ü verdi.")


for module_name in ALL_MODULES:
    imported_module = import_module("userbot.modules." + module_name)
    

loop = asyncio.get_event_loop()
LOGS.info("FAST is working now.")
LOGS.info("K√∂m…ôy…ô ehtiyacƒ±nƒ±z olarsa, @FastSupp qrupuna yazƒ±n.")
LOGS.info(f"FAST Version: {FAST_VERSION}")
bot.loop.create_task(startupcyber())
bot.loop.create_task(asistan_aktiv_et())
bot.run_until_disconnected()
